-- Builds a floor

if term.isColor() then
	term.setTextColor(colors.orange)
	term.setBackgroundColor(colors.black)
else
	term.setTextColor(colors.black)
	term.setBackgroundColor(colors.white)
end
term.clear()
term.setCursorPos(1,1)

print("Enter length:")
width = read()
width = width + 1 - 1

if width < 1 then
	print('"' .. width .. '"' .. " is an invalid value!")
	sleep(1.5)
	shell.run('floor')
end

print("Enter width:")
length = read()
length = length + 1 - 1

if length < 1 then
	print('"' .. length .. '"' .. " is an invalid value!")
	sleep(1.5)
	shell.run('floor')
end

print("Enter pattern:  (checker, stripe, solid)")
pattern = read()

if pattern ~= "checker" and pattern ~= "stripe" and pattern ~= "solid" then
	print('"' .. pattern .. '"' .. " is an invalid value!")
	print("Try: checker, stripe, or solid")
	sleep(2.5)
	shell.run('floor')
end


term.clear()
term.setCursorPos(1,1)
print("Building floor...")

altDir = true
altBlock = false
done = false
L = 1
W = 1
dir = 2
prevDir = 1
prevL = 1
prevW = 1
keepPrevCords = false
placeMore = true

function turn(Dir)
	if Dir == 0 then
		if dir == 1 then
			turtle.turnLeft()
		elseif dir == 2 then
			turtle.turnLeft()
			turtle.turnLeft()
		elseif dir == 3 then
			turtle.turnRight()
		end
	elseif Dir == 1 then
		if dir == 0 then
			turtle.turnRight()
		elseif dir == 2 then
			turtle.turnLeft()
		elseif dir == 3 then
			turtle.turnRight()
			turtle.turnRight()
		end
	elseif Dir == 2 then
		if dir == 1 then
			turtle.turnRight()
		elseif dir == 3 then
			turtle.turnLeft()
		elseif dir == 0 then
			turtle.turnRight()
			turtle.turnRight()
		end
	elseif Dir == 3 then
		if dir == 2 then
			turtle.turnRight()
		elseif dir == 0 then
			turtle.turnLeft()
		elseif dir == 1 then
			turtle.turnRight()
			turtle.turnRight()
		end
	end
	dir = Dir
	return
end

function tryRefuel()
	local function isFuel()
		checkNext = true
		if pattern == 'solid' then
			for j = 2,16 do
				if turtle.getItemCount(j) > 0 and checkNext then
					turtle.select(j)
					if turtle.refuel(1) then
						checkNext = false
						turtle.select(1)
						return true
					end
				end
				if j == 16 and checkNext then
					turtle.select(1)
					return false
				end
			end
		else
			for j = 3,16 do
				if turtle.getItemCount(j) > 0 and checkNext then
					turtle.select(j)
					if turtle.refuel(1) then
						checkNext = false
						turtle.select(1)
						return true
					end
				end
				if j == 16 and checkNext then
					turtle.select(1)
					return false
				end
			end
		end
	end
	if not isFuel() then
		term.setCursorPos(1,1)
		term.clear()
		print("Add more fuel to continue...")
		while not isFuel() do
			os.pullEvent("turtle_inventory")
		end
	end
end

function goTo(w, l, Dir, toStart, why, slotNum)
	if toStart then
		keepPrevCords = true
		turn(1)

		while L > l do
			if why == "fuel" then
				tryForward(true)
			else
				tryForward()
			end
			L = L -1
		end

		turn(0)

		while W > w do
			if why == "fuel" then
				tryForward(true)
			else
				tryForward()
			end
			W = W - 1
		end

		if why == "fuel" then
			tryRefuel()
			goTo(prevW, prevL, prevDir, false, "continue")
		elseif why == "done" then
			print("Floor complete!")
			sleep(1)
			sendInfo = width * length
			shell.run("doneWithDig", sendInfo, "floor")
		elseif why == "empty" then
			term.clear()
			term.setCursorPos(1,1)
			print("I need more material to continue.")
			while turtle.getItemCount(slotNum) == 0 do
				os.pullEvent("turtle_inventory")
			end
			goTo(prevW, prevL, prevDir, false, "continue")
		else
			return
		end

	else
		keepPrevCords = true
		turn(2)

		while W < prevW do
			tryForward()
			W = W + 1
		end
		if prevL ~= 1 then
			turn(3)
		end
		while L < prevL do
			tryForward()
			L = L + 1
		end
		turn(prevDir)
		keepPrevCords = false
		if why == "continue" then
			print("Continuing...")
			row()
		else
			return
		end
	end

end
needFuel = true
function refuel()
	local fLevel = turtle.getFuelLevel()
	if fLevel <= W + L then
		needFuel = true
		for i = 2,16 do
			if turtle.getItemCount(i) > 0 and needFuel then
				turtle.select(i)
				if turtle.refuel(1) then
					needFuel = false
					turtle.select(1)
					return true
				end
			end
		end
		turtle.select(1)
		needFuel = true
		return false
	end
	turtle.select(1)
	return true
end

function tryForward(bypass)
	needFuel = true
	if not bypass and not refuel() then
		if not keepPrevCords then
			prevDir = dir
			prevL = L
			prevW = W
		end
		goTo(1, 1, 0, true, "fuel")
	end
	local showStopMsg = true
	local callTryPlace = false
	local wasStoped = false
	while not turtle.forward() do
		wasStoped = true
		if turtle.detect() then
			term.clear()
			term.setCursorPos(1,1)
			print("There is something in my way.")
			print("Waiting for it to be moved...")
			while turtle.detect() do
				sleep(0.2)
			end
		elseif turtle.getFuelLevel() == 0 then
			term.clear()
			term.setCursorPos(1,1)
			print("I thought I had more fuel :(")
			os.pullEvent("turtle_inventory")
			refuel()
		else
			if showStopMsg then
				callTryPlace = true
				showStopMsg = false
				term.clear()
				term.setCursorPos(1,1)
				print("Something got in my way.")
				print("Waiting until it moves.")
			else
				sleep(0.4)
			end
		end
	end
	if callTryPlace and not placeMore then
		tryPlace()
	end
	if wasStoped then
		print("Continuing...")
		sleep(0.8)
		term.setCursorPos(1,1)
		term.clear()
	end
	return true
end

function tryPlace()
	if pattern == "stripe" then
		if math.fmod(L, 2) == 0 then
			altBlock = true
		else
			altBlock = false
		end
	elseif pattern == "checker" then
		if math.fmod(L, 2) == 0 then
			if math.fmod(W, 2) == 0 then
				altBlock = true
			else
				altBlock = false
			end
		else
			if math.fmod(W, 2) == 0 then
				altBlock = false
			else
				altBlock = true
			end
		end
	end
	if altBlock then
		turtle.select(2)
	else
		turtle.select(1)
	end
	if turtle.getItemCount(1) == 0 then
		if not keepPrevCords then
			prevDir = dir
			prevL = L
			prevW = W
		end
		goTo(1,1,0,true,"empty", 1)
	end
	if not turtle.detectDown() then
		turtle.placeDown()
	elseif not turtle.compareDown() then
		if not turtle.digDown() then
			term.clear()
			term.setCursorPos(1,1)
			print("I can't place a block here.")
			while turtle.detectDown() and not turtle.digDown() do
				print("Press enter to continue. Or type 'skip' and I'll just move on.")
				nowWhat = read()
				term.clear()
				term.setCursorPos(1,1)
				if nowWhat == "skip" or nowWhat == "'skip'" then
					print("Skipping this block.")
					break
				end
				print("Continuing...")
			end
		end
		turtle.placeDown()
	end
	return
end

function row()
	for n = 1,width do
		tryPlace()
		if altDir then
			if W < width then
				tryForward()
				W = W + 1
			else
				break
			end
		else
			if W > 1 then
				tryForward()
				W = W - 1
			else
				break
			end
		end
	end
	if not done then
		nextRow()
	else
		if not keepPrevCords then
			prevDir = dir
			prevL = L
			prevW = W
		end
		placeMore = false
		goTo(1, 1, 0, true, "done")
	end
end

function nextRow()
	L = L + 1
	if length ~= 1 then
		if altDir then
			turn(3)
			tryForward()
			turn(0)
		else
			turn(3)
			tryForward()
			turn(2)
		end
		altDir = not altDir
		if L == length then
			done = true
		end
		row()
	else
		if not keepPrevCords then
			prevDir = dir
			prevL = L
			prevW = W
		end
		goTo(1, 1, 0, true, "done")
	end
end

turtle.select(1)
row()